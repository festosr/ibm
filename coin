$ mkdir ibmcoin && cd ibmcoin
$ truffle init
$ npm install zeppelin-solidity@1.9.0

#creates contract ibmcoin
touch contracts/ibmcoin.sol

pragma solidity 0.4.19;

import 'zeppelin-solidity/contracts/token/ERC20/MintableToken.sol';

contract ibmcoin is MintableToken {
    string public name = "IBM coin";
    string public symbol = "IBM";
    uint8 public decimals = 18;
}

#creates crowdsale contract
touch contracts/ibmcoinCrowdsale.sol

pragma solidity 0.4.19;

import './ibmcoin.sol';
import 'zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol';
import 'zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol';


contract ibmcoinCrowdsale is TimedCrowdsale, MintedCrowdsale {
    function ibmcoinCrowdsale
        (
            uint256 _openingTime,
            uint256 _closingTime,
            uint256 _expectedTotalSupply,
            uint256 _rate,
            address _wallet,
            MintableToken _token
        )
        public
        Crowdsale(_rate, _wallet, _token)
        TimedCrowdsale(_openingTime, _closingTime) {

        }
}

# assigns parameters as per the Crowdsale and TimeCrowdsale contracts

const ibmcoinCrowdsale = artifacts.require('./ibmcoinCrowdsale.sol');
const ibmcoin = artifacts.require('./ibmcoin.sol');

module.exports = function(deployer, network, accounts) {
    const openingTime = web3.eth.getBlock('latest').timestamp + 86400 * 5; // two secs in the future
    const closingTime = openingTime + 86400 * 30; // 30 days
    const expectedTotalSupply = 600000000;
    const rate = new web3.BigNumber(1000);
    const wallet = accounts[1];

    return deployer
        .then(() => {
            return deployer.deploy(ibmcoin);
        })
        .then(() => {
            return deployer.deploy(
                ibmcoinCrowdsale,
                openingTime,
                closingTime,
                rate,
                wallet,
                ibmcoin.address
            );
        });
};
